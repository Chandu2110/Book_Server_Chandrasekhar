This is the backend server for an online book store, built using Node.js and MongoDB. The server handles authentication, book management, and purchasing functionality. 
The project follows a basic MVC (Model-View-Controller) architecture and uses JWT for authentication.

Features
Authentication: Separate login mechanisms for Managers and Customers using JWT.
Book Management: Managers can add, view, and delete books from the inventory.
Book Purchasing: Customers can browse and purchase available books.

Technology Stack
Backend Framework: Node.js with Express.js
Database: MongoDB

Authentication: JSON Web Token (JWT)
Project Structure

online-book-store/
├── config/
│   └── db.js                # MongoDB connection setup
├── controllers/
│   ├── authController.js    # Authentication logic
│   └── bookController.js    # Book management logic
├── middleware/
│   └── authMiddleware.js    # JWT authentication middleware
├── models/
│   ├── Book.js              # Book schema/model
│   └── User.js              # User schema/model
├── routes/
│   ├── authRoutes.js        # Authentication routes
│   └── bookRoutes.js        # Book-related routes
├── .gitignore               # Git ignore file
├── .env                     # Environment variables (not tracked by Git)
├── app.js                   # Main application entry point
├── package.json             # Project metadata and dependencies
└── README.md                # Project documentation

Installation
Clone the repository:
git clone https://github.com/yourusername/book-server.git
cd book-server

Install dependencies:
npm install

Create a .env file:

MONGO_URI=your_mongodb_connection_string
JWT_SECRET=your_jwt_secret_key
PORT=5000
//Replace your_mongodb_connection_string with your MongoDB URI.
//Replace your_jwt_secret_key with a secure random string.

Start the server:
node app.js

Server will be running on:
http://localhost:5000

API Endpoints
Common Endpoints (Accessible by both Manager and Customer)
Sign Up:
POST /api/auth/signup

{
  "username": "string",
  "password": "string",
  "role": "manager/customer"
}

Sign In:
POST /api/auth/signin

{
  "username": "string",
  "password": "string"
}

Get All Books:
GET /api/books

Get a Particular Book:
GET /api/books/:id
Manager-Specific Endpoints

Insert New Book:
POST /api/books
Request Body:
{
  "bookName": "string",
  "status": "AVAILABLE"
}

Delete Book by Name:
DELETE /api/books/:name

Customer-Specific Endpoint
Buy Book by Name:
POST /api/books/buy

{
  "bookName": "string",
  "status": "SOLD"
}

Important Notes
1)The .env file is not tracked by Git for security reasons. Ensure it is correctly set up before running the server.
Regular commits and proper commit messages are recommended for tracking changes.
2)The server is mad eon MongoDB on a free server for test and project purpose, fit to requirements.
3) The backend API testing is done on postmaster by creating various Jwt key which is short valid.

Contact
For any inquiries contact rcchandu10@gmail.com